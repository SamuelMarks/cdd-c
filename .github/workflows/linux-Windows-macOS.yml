name: Linux, Windows, macOS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    name: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: mkdir
        run: mkdir build

      - name: Cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: vcpkg
          key: ${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}-project0

      - name: checkout vcpkg
        uses: actions/checkout@v4
        with:
          repository: "offscale/vcpkg"
          ref: project0
          path: vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'

      - name: Setup vcpkg (Windows)
        run: vcpkg\bootstrap-vcpkg.bat -disableMetrics
        shell: cmd
        if: matrix.os == 'windows-latest'

      - name: Setup vcpkg (non-Windows)
        run: ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
        if: matrix.os != 'windows-latest'

      - name: configure (with vcpkg on Windows)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE="..\vcpkg\scripts\buildsystems\vcpkg.cmake" -DBUILD_TESTING=1 -DC_CDD_BUILD_TESTING=1 -S . -B build
        shell: cmd
        if: matrix.os == 'windows-latest'

      - name: configure (with vcpkg on non-Windows)
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE="../vcpkg/scripts/buildsystems/vcpkg.cmake" \
                -DBUILD_TESTING=1 \
                -DC_CDD_BUILD_TESTING=1 \
                -S . -B build
        if: matrix.os != 'windows-latest'

      - name: build
        run: cmake --build build

      - name: test
        working-directory: ./build
        run: ctest -C Debug --rerun-failed --output-on-failure .

      - name: generate then build & test generated (non Windows)
        run: |
          mkdir 'build_gen'
          build/bin/c_cdd_cli generate_build_system cmake 'build_gen' 'simp'
          build/bin/c_cdd_cli schema2code 'c_cdd/tests/mocks/simple_json.schema.json' 'build_gen/src/simp'
          #build/bin/c_cdd_cli jsonschema2tests 'c_cdd/tests/mocks/simple_json.schema.json' 'simp.h' 'build_gen/src/test/test_simp.h'
          cmake -S 'build_gen' -B 'build_gen/cmake_debug_build' -DCMAKE_BUILD_TYPE='Debug' -DCMAKE_TOOLCHAIN_FILE='../vcpkg/scripts/buildsystems/vcpkg.cmake'
          cmake --build 'build_gen/cmake_debug_build'
          #ctest -C 'Debug' --build-run-dir 'build_gen/cmake_debug_build' --verbose
        if: matrix.os != 'windows-latest'

      - name: generate then build & test generated (Windows)
        run: |
          md "build_gen"
          build\bin\c_cdd_cli generate_build_system cmake "build_gen" "simp"
          build\bin\c_cdd_cli schema2code "c_cdd\tests\mocks\simple_json.schema.json" "build_gen\src\simp"
          :: build\bin\c_cdd_cli jsonschema2tests "c_cdd\tests\mocks\simple_json.schema.json" "simp.h" "build_gen\src\test\test_simp.h"
          cmake -S "build_gen" -B "build_gen\cmake_debug_build" -DCMAKE_BUILD_TYPE="Debug" -DCMAKE_TOOLCHAIN_FILE="..\vcpkg\scripts\buildsystems\vcpkg.cmake"
          cmake --build "build_gen\cmake_debug_build"
          #ctest -C "Debug" --build-run-dir "build_gen\cmake_debug_build" --verbose
        shell: cmd
        if: matrix.os == 'windows-latest'
